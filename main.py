from backtracking import backtracking
from dfs import dfs
from utils import printMaze, checkNode, createAdjacencyList, findNearbyFreeCells

def main():
    maze = [
        ["#", "E", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#"],
        ["#", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", " ", "#"],
        ["#", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", " ", "#"],
        ["#", "#", "#", "#", " ", "#", "#", "#", "#", " ", "#", "#", "#", " ", "#"],
        ["#", "#", "#", "#", " ", " ", " ", " ", " ", " ", " ", "#", "#", " ", "#"],
        ["#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", "#", "#", " ", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", "#", "#", " ", "#"],
        ["#", " ", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", "#", " ", "#"],
        ["#", " ", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", "#", " ", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", " ", "#"],
        ["#", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", " ", "#"],
        ["#", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#", "#", "#", "S", "#", "#", "#", "#", "#", "#", "#"],
    ]
    path, currCell = backtracking(maze, (14, 7))
    while currCell != (14, 7):
        currCell = path.get((currCell[0], currCell[1]))
        maze[currCell[0]][currCell[1]] = "."
    printMaze(maze)

if __name__ == "__main__":
    main()

